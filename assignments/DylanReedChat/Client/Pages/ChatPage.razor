@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable


@* a user has entered their name in the first input box of the chat component, when they focus on the message input, any
    other users connected to the server will see a message to the right of the Send button that says that users name is
    typing a message. *@

<section class="chat">
    <div id="messagesList" class="messages">
        <div class="other">
            <ul>
                @foreach (var message in messages)
                {
                    @if (!message.Contains($"{nameInput}:"))
                    {
                        <li>
                            <span>@(message == null ? "" : message)</span>
                        </li>
                    }
                }
            </ul>
        </div>

        <div class="recipient">
            <ul>
                @foreach (var message in messages)
                {
                    @if (message.Contains($"{nameInput}:"))
                    {
                        <li>
                            <span>@(message == null ? "" : message)</span>
                        </li>
                    }
                }
            </ul>
        </div>

    </div>

    <ul class="typing-indicators">
        <li class="indicator">Test</li>
        @foreach (var indicator in typingIndicators)
        {
            <li class="indicator">@indicator</li>
        }
    </ul>

    <div class="chat-form">
        <div class="inputs">
            <div class="form-group">
                <label>
                    Name:
                    <input @bind="nameInput" />
                </label>
            </div>
            <div class="form-group">
                <label>
                    Message:
                    <input @bind="messageInput" @onfocus="TypingIndicator" size="50" />
                </label>
            </div>
        </div>
        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
</section>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private List<string> typingIndicators = new List<string>();
    private string connectionId;
    private string nameInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>
        ("ReceiveMessage", (name, message) =>
        {
            var msg = $"{name}: {message} {@DateTime.Now.ToString("h:mm tt")}";
            messages.Add(msg);
            messageInput = string.Empty;
            StateHasChanged();
        });
        hubConnection.On<string, string>("TypingIndicator", (name, msg) =>
        {
            var typingMessage = $"{name} {msg} {@DateTime.Now.ToString("h:mm tt")}";
            typingIndicators.Add(typingMessage);
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    async Task Send() =>
    await hubConnection.InvokeAsync("SendMessage", nameInput, messageInput);

    async Task TypingIndicator() =>
    await hubConnection.SendAsync("TypingIndicator", nameInput, "is typing");

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
