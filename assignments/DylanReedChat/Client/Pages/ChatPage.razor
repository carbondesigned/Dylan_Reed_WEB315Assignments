@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable


@* a user has entered their name in the first input box of the chat component, when they focus on the message input, any
    other users connected to the server will see a message to the right of the Send button that says that users name is
    typing a message. *@

<section class="chat">

    <ul id="messagesList" class="messages">
        @foreach (var message in messages)
        {
            <li>@message</li>

            @if (isTyping)
            {
                <li>@nameInput is typing</li>
            }
        }
    </ul>


    <div class="chat-form">
        <div class="inputs">
            <div class="form-group">
                <label>
                    Name:
                    <input @bind="nameInput" />
                </label>
            </div>
            <div class="form-group">
                <label>
                    Message:
                    <input @bind="messageInput" @onfocus="() => isTyping = true" @onblur="() => isTyping = false"
                           size="50" />
                </label>
            </div>
        </div>
        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
    <p>
        @user
    </p>
</section>

@code {
    private HubConnection hubConnection;
    private List<string>
    messages = new List<string>
    ();
    private string nameInput;
    private string messageInput;

    private bool isTyping = false;
    private string user;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>
        ("ReceiveMessage", (name, message) =>
        {
            var encodedMsg = $"{name}: {message}";
            messages.Add(encodedMsg);
            messageInput = string.Empty;
            StateHasChanged();
        });
        hubConnection.On<string>
        ("GetUserId", (userId) =>
        {
            user = userId;
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", nameInput, messageInput);

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
