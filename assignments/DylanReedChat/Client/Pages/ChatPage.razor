@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using DylanReedChat.Client.Components

<section class="chat">
    <Chat
        NameInput="@nameInput"
        MessageInput="@messageInput"
        Messages="@messages"
        IsConnected="@IsConnected"
        TypingIndicators="@typingIndicators"
     />

    <div class="chat-form">
        <div class="inputs">
            <div class="form-group">
                <label>Name:</label>
                <input @bind="nameInput" />
            </div>
            <div class="form-group">
                <label>Message:</label>
                <input @bind="messageInput" @onfocus="TypingIndicator" size='50' @onblur="RemoveTypingIndicator" />

            </div>
        </div>
        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
</section>

@code {
    private HubConnection hubConnection;

    // a list to store messages
    private List<string> messages = new List<string>();

    // a list that uses similar logic to store "who is typing"
    private List<string> typingIndicators = new List<string>();

    private string nameInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>
        ("ReceiveMessage", (name, message) =>
        {
            var msg = $"{name}: {message} {@DateTime.Now.ToString("h:mm tt")}";
            messages.Add(msg);
            messageInput = string.Empty;
            StateHasChanged();
        });

        // listen to who is typing
        hubConnection.On<string, string>("TypingIndicator", (name, msg) =>
        {
            var typingMessage = $"{name} {msg}";
            if (!typingIndicators.Contains(typingMessage) && nameInput.Length > 0)
            {
                typingIndicators.Add(typingMessage);
                StateHasChanged();
            }
            StateHasChanged();
        });
        hubConnection.On<string>("RemoveTypingIndicator", (name) =>
        {
            var typingMessage = $"{name} is typing";
            if (typingIndicators.Contains(typingMessage))
            {
            // remove the typing indicator from the list
            typingIndicators.Remove(typingMessage);
                StateHasChanged();
            }
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    async Task Send() =>
    await hubConnection.InvokeAsync("SendMessage", nameInput, messageInput);

    async Task TypingIndicator() =>
    await hubConnection.SendAsync("TypingIndicator", nameInput, "is typing");

    async Task RemoveTypingIndicator() =>
    await hubConnection.SendAsync("RemoveTypingIndicator", nameInput);

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
